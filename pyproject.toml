[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "python-aegis"
version = "0.1.0"
description = "A tool to generate a report of CVEs from your packages. Supports Poetry, Pipenv and requirements.txt."
authors = [
    "Nilton Frederico Teixeira <9078708+niltonfrederico@users.noreply.github.com>",
]
repository = "https://github.com/niltonfrederico/python-aegis"
readme = "README.md"
license = "GPL-3.0"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Security",
]
packages = [{ include = 'aegis' }]

[tool.poetry.scripts]
aegis = "aegis:aegis"

[tool.poetry.dependencies]
python = "^3.13"
requests = "^2.32.3"
tablib = "^3.7.0"
toml = "^0.10.2"
pygithub = "^2.5.0"
cvss = "^3.3"


[tool.poetry.group.dev.dependencies]
ruff = "^0.8.1"
ipdb = "^0.13.13"

[tool.ruff]
# Same as Black.
line-length = 88

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "W",   # pycodestyle warnings
    "C",   # mccabe
    "B",   # flake8-bugbear
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PL",  # pylint
    "RUF", # ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501", # Line too long (handled by formatter)
]

unfixable = []

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
"*/__init__.py" = ["F401"]

[tool.ruff.lint.isort]
# Force single-line imports
force-single-line = true

# Define import sections and their order
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
order-by-type = true
lines-between-types = 1

# Known first-party imports (your package)
known-first-party = ["client", "report", "aegis"]

# Known third-party imports (add more as needed)
known-third-party = ["requests", "tablib"]

# Ensure imports are grouped properly
combine-as-imports = false

# Add extra lines between sections
lines-after-imports = 2

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
